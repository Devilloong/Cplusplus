【目录】
1.多线程知识
2.
3.
4.


【正文】
1.多线程知识
  （来源课程【C++并发与多线程编程】）
  ---p3:课时3：线程启动、结束、创建多线程方法、join、detach.
      内容：
       1)范例演示线程运行的开始和结束
          1.1)thread
          1.2)join()
          1.3)detach()
          1.4)joinable()
       2)其他创建线程的手法
          2.1)用类，以及一个问题范例
          2.2)用lambda表达式
     
     ①一般来说，主线程创建完后，子线程也会被销毁
     ②当使用detach时，如果子线程有地址依赖于主线程中的零时变量，
     当主线程结束后，如果子线程还有任务没有完成，将会给程序带来不可预料的后果。
     
     如:
     #include <iostream>
     #include <thread>
     
     class Ta{
       public:
       int m_i;
       Ta(int& i) : m_i(i) {}
       
        void operator()(){
            std::cout << "1_i = " << m_i << std::endl;
            std::cout << "2_i = " << m_i << std::endl;
            std::cout << "3_i = " << m_i << std::endl;
            std::cout << "4_i = " << m_i << std::endl;
        }
     };
     
     int main(){
        int i = 5;
        Ta ta(i);
        std::thread t(ta);
        ta.detach();
        
        std::cout << "This is main thread." << std::endl;
        
        return 0;
     }
  
    这种情况时，detach会引起一个bug。假如主线程执行完后，ta的空间将会被释放，但是子线程中还引用着i的地址，会产生不可预料的错误。
    
 ---p4 课时4 线程传参详解,detach()大坑，成员函数做线程函数
     内容：
      1）传递临时对象作为线程参数
          1.1）要避免的陷阱（解释1）
          1.2）要避免的陷阱（解释2）
          1.3）总结
      2）临时对象作为线程参数继续讲
          2.1）线程id的概念
          2.2）临时对象构造时机抓捕
      3）传递类对象、智能指针作为线程参数
      4）用成员函数指针做线程函数
      
      detach大坑之一：变量值传递时，当函数参数为值引用时，在多线程情况下，可能是一个假引用（形参引用的变量地址和原变量地址不同），
            而引入指针传递时，指针参数地址和指针变量相同，会造成主线程结束后，指针地址也会被销毁。
      detach大坑之二：函数传值时，自定义结构体或传参类型要使用const 加引用进行约束，要不然，就会多次创建对象。入参需要将隐式转换显示转换
      
      【重要】在传递类对象时要用引用，以免产生多次构造对象 
      
      【修改成员变量得值】引用main中的自定义类型或数据，使用std::ref， 才能使得print里能修改Ta里面得成员变量得值。
      因为它们共用一个地址了. 原理是，它省略了一个拷贝构造函数
      如 
      class Ta{
        public:
          mutable int m_i;
          Ta(int i) : m_i(i){}
          Ta(const Ta& t) : m_i(t.m_i){}
     };
     
     void print(const A& mybuf){    //不管是使用引用接收还是值接收，编译器统一都将mybuf拷贝一份再传入进去
                                    //必须有const, 没有const修饰的话，会产生invoke错误
        mybuf.m_i = 199;
        std::cout << "子线程print的参数地址是 " << &mybuf << " 线程ID是: " << std::this_thread::get_id() << std::endl;
     }
     
     int main(){
        A a(10);
        //std::thread t(print, Ta(a));  //这样的构造是无法将函数中的m_i值199带回main中，因为a传入print时，执行的是一份拷贝
        //std::thread t(print, &a); //这行代码的效果相当于std::thread t(print, std::ref(a));
        std::thread t(print, std::ref(a));  //这样print函数中的值的修改才能带回main中。 （std::ref这个好牛叉啊）
                                        //【注意】当a与局部变量a共同指向一个内存时，得考虑当主线程将a释放掉后，内存中没有空间的情况，所有后面一定
                                        //要加上join, 而不是detach                                     
                                        
        t.join();
        //t.detach();
        
        std::cout << a.m_i  << std::endl;
            
        return 0;
     }
     
    【传递智能指针传值】
    假设传递一个独占式智能指针。
    unique_ptr<int> pz;
    独占式智能指针赋值时的用std::move
    
    #include <thread>
    #include <iostream>
    
    void print(unique_ptr<int> pz){
        std::cout << "this thread ID: " << std::this_thread::get_id() << std::endl;    
    }
     
     int main(){
        unique_ptr<int> pz(new int(100));
        //std::thread t(print, pz); //程序报智能指针相关得错误
        std::thread t(print, std::move(pz));  // 使用move将指针临时拷贝， 赋值完后pz将会被清空
        
        return 0;     
     }
     
     
   【类的成员函数传值】
   指定类中任意一个成员函数进行
   需要使用&A::memberfunction
   #include <thread>
   #include <iostream>
   
   class Ta{
    public:
      int m_i;
      void setI(const int i){
        m_i = i;
        m_i = 20;
        std::cout << "thread i: " << i << std::endl;
      }
      
      void getI(int i){
        i = m_i;
      }
   };
   
   int main(){
      Ta ta;
   
      //std::thread t(&Ta::setI, ta, 15);     //这种情况，ta的值无法改变
      //std::thread t(&Ta::setI, &ta, 15);      //这种情况，ta的值才能改变
      std::thread t(&Ta::setI, std::ref(ta), 15); //这种情况，ta的值才能改变
      t.join();
      
      std::cout << "main thread ta i = " << ta.m_i << std::endl;
      return 0;
   }
   
   【类的对象来创建线程函数】
   注意此时使用&跟std::ref不能通用。
   #include <thread>
   #include <iostream>
   
   class Ta{
      public:
       int m_i;
       Ta(){}
       void operator()(int num){
          m_i = num;
          m_i = 50;
          std::cout << "thread num: " << num << std::endl;
       }
   };
   
   int main(){
    Ta ta;
    //std::thread t(ta, 20);    //这种格式是错误的， 无法编译
    //std::thread t(&ta, 20);     //此时也是错误的，无法编译
    std::thread t(std::ref(ta), 20);  //此时是正确的，这样才能进行值传递。
    std::cout << "main thread m_i = " << ta.m_i << std::endl;
    return 0;
   }
   
   
2.
3.
4.
